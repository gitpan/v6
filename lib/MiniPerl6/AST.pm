# Do not edit this file - Generated by MiniPerl6 6.0
use v5;
use utf8;
use strict;
use warnings;
no warnings ('redefine', 'once', 'void', 'uninitialized', 'misc');
use MiniPerl6::Perl5::Runtime;
our $MATCH = MiniPerl6::Match->new();
{
package GLOBAL;
sub new { shift; bless { @_ }, "GLOBAL" }

# use v6 
;
{
package CompUnit;
sub new { shift; bless { @_ }, "CompUnit" }
sub name { $_[0]->{name} };
sub attributes { $_[0]->{attributes} };
sub methods { $_[0]->{methods} };
sub body { $_[0]->{body} };
sub visit { my $self = $_[0];  }
}

;
{
package Val::Int;
sub new { shift; bless { @_ }, "Val::Int" }
sub visit { my $self = $_[0];  }
}

;
{
package Val::Bit;
sub new { shift; bless { @_ }, "Val::Bit" }
sub visit { my $self = $_[0];  }
}

;
{
package Val::Num;
sub new { shift; bless { @_ }, "Val::Num" }
sub visit { my $self = $_[0];  }
}

;
{
package Val::Buf;
sub new { shift; bless { @_ }, "Val::Buf" }
sub visit { my $self = $_[0];  }
}

;
{
package Val::Undef;
sub new { shift; bless { @_ }, "Val::Undef" }
sub visit { my $self = $_[0];  }
}

;
{
package Lit::Array;
sub new { shift; bless { @_ }, "Lit::Array" }
sub visit { my $self = $_[0];  }
}

;
{
package Lit::Hash;
sub new { shift; bless { @_ }, "Lit::Hash" }
sub visit { my $self = $_[0];  }
}

;
{
package Lit::Object;
sub new { shift; bless { @_ }, "Lit::Object" }
sub visit { my $self = $_[0];  }
}

;
{
package Index;
sub new { shift; bless { @_ }, "Index" }
sub visit { my $self = $_[0];  }
}

;
{
package Lookup;
sub new { shift; bless { @_ }, "Lookup" }
sub visit { my $self = $_[0];  }
}

;
{
package Var;
sub new { shift; bless { @_ }, "Var" }
sub visit { my $self = $_[0];  }
}

;
{
package Bind;
sub new { shift; bless { @_ }, "Bind" }
sub visit { my $self = $_[0];  }
}

;
{
package Proto;
sub new { shift; bless { @_ }, "Proto" }
sub visit { my $self = $_[0];  }
}

;
{
package Call;
sub new { shift; bless { @_ }, "Call" }
sub invocant { $_[0]->{invocant} };
sub hyper { $_[0]->{hyper} };
sub method { $_[0]->{method} };
sub arguments { $_[0]->{arguments} };
sub visit { my $self = $_[0];  }
}

;
{
package Apply;
sub new { shift; bless { @_ }, "Apply" }
sub code { $_[0]->{code} };
sub arguments { $_[0]->{arguments} };
sub namespace { $_[0]->{namespace} };
sub visit { my $self = $_[0];  }
}

;
{
package Return;
sub new { shift; bless { @_ }, "Return" }
sub result { $_[0]->{result} };
sub visit { my $self = $_[0];  }
}

;
{
package If;
sub new { shift; bless { @_ }, "If" }
sub cond { $_[0]->{cond} };
sub body { $_[0]->{body} };
sub otherwise { $_[0]->{otherwise} };
sub visit { my $self = $_[0];  }
}

;
{
package While;
sub new { shift; bless { @_ }, "While" }
sub cond { $_[0]->{cond} };
sub body { $_[0]->{body} };
sub visit { my $self = $_[0];  }
}

;
{
package For;
sub new { shift; bless { @_ }, "For" }
sub cond { $_[0]->{cond} };
sub body { $_[0]->{body} };
sub topic { $_[0]->{topic} };
sub visit { my $self = $_[0];  }
}

;
{
package Decl;
sub new { shift; bless { @_ }, "Decl" }
sub decl { $_[0]->{decl} };
sub type { $_[0]->{type} };
sub var { $_[0]->{var} };
sub visit { my $self = $_[0];  }
}

;
{
package Method;
sub new { shift; bless { @_ }, "Method" }
sub name { $_[0]->{name} };
sub sig { $_[0]->{sig} };
sub block { $_[0]->{block} };
sub visit { my $self = $_[0];  }
}

;
{
package Sub;
sub new { shift; bless { @_ }, "Sub" }
sub name { $_[0]->{name} };
sub sig { $_[0]->{sig} };
sub block { $_[0]->{block} };
sub visit { my $self = $_[0];  }
}

;
{
package Do;
sub new { shift; bless { @_ }, "Do" }
sub block { $_[0]->{block} };
sub visit { my $self = $_[0];  }
}

;
{
package Use;
sub new { shift; bless { @_ }, "Use" }
sub mod { $_[0]->{mod} };
sub visit { my $self = $_[0];  }
}


}

1;
